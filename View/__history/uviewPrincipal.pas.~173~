unit uviewPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Data.DB, Vcl.Grids,
  Vcl.DBGrids, Vcl.StdCtrls, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Comp.DataSet, FireDAC.Comp.Client, RESTRequest4D,
  System.JSON, System.StrUtils, System.Generics.Collections;

type
  TviewPrincipal = class(TForm)
    pnlBotoes: TPanel;
    btnNovo: TButton;
    btnEditar: TButton;
    btnBuscar: TButton;
    grdConsulta: TDBGrid;
    dtsConsulta: TDataSource;
    mmtConsulta: TFDMemTable;
    mmtConsultacodigo: TIntegerField;
    mmtConsultadescricao: TStringField;
    mmtConsultastatus: TStringField;
    mmtConsultaprioridade: TIntegerField;
    mmtConsultadata: TDateField;
    btnExcluir: TButton;
    btnEstatisticas: TButton;
    btnSair: TButton;
    procedure btnBuscarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnEditarClick(Sender: TObject);
    procedure btnEstatisticasClick(Sender: TObject);
    procedure btnSairClick(Sender: TObject);
  private
    procedure Buscar;
    procedure Excluir;
  public
    { Public declarations }
  end;

var
  viewPrincipal: TviewPrincipal;

implementation

{$R *.dfm}

uses uviewNovo, uviewAlterar, uviewEstatisticas;

procedure TviewPrincipal.Buscar;
var
  LResponse: IResponse;
  lArr: TJSONArray;
  i: Integer;
  lData: TDateTime;
begin
  {Limpando a tabela para não acumular registros}
  mmtConsulta.EmptyDataSet;

  try
    {Requisição com o serviço, utilizando Rest4Request}
    LResponse := TRequest.New.BaseURL('http://localhost:9000/task')
      .BasicAuthentication('bruno', 'montreal')
      .Accept('application/json')
      .Get;

    {Verificando a resposta para alimentar o grid}
    if LResponse.StatusCode = 200 then
    begin
      lArr := TJSONObject.ParseJSONValue(LResponse.Content) as TJSONArray;

      try
        if lArr.Count = 0 then
        begin
          ShowMessage('A pesquisa não retornou nenhuma tarefa!');
          Exit;
        end;

        {Percorrendo o array de tarefas}
        for i := 0 to Pred(lArr.Count) do
        begin
          {Abre a tabela e alimenta os campos com os JSON, de acordo com a tipagem}
          mmtConsulta.Append;
          mmtConsulta.FieldByName('codigo').AsInteger     := StrToInt(TJSONObject(lArr.Items[i]).GetValue('codigo').Value);
          mmtConsulta.FieldByName('descricao').AsString   := TJSONObject(lArr.Items[i]).GetValue('descricao').Value;
          mmtConsulta.FieldByName('status').AsString      := TJSONObject(lArr.Items[i]).GetValue('status').Value;

          {Aqui precisei converter, já que nesse novo Delphi, a data fica como float}
          lData := FloatToDateTime(StrToFloat(TJSONObject(lArr.Items[i]).GetValue('data').Value));
          mmtConsulta.FieldByName('data').AsDateTime      := lData;
          mmtConsulta.FieldByName('prioridade').AsInteger := StrToInt(TJSONObject(lArr.Items[i]).GetValue('prioridade').Value);
          mmtConsulta.Post;
        end;
      finally
        {Limpando da memória}
        FreeAndNil(lArr);
      end;
    end
    else
      raise Exception.Create('Registros não encontrados!');
  except
    on E: Exception do
      ShowMessage('Falha na consulta de tarefas: ' + E.Message);
  end;
end;

procedure TviewPrincipal.btnNovoClick(Sender: TObject);
var
  lForm: TviewNovo;
begin
  {Criação do form como modal}
  lForm := TviewNovo.Create(Self);
  try
    lForm.ShowModal;
    Buscar;
  finally
    FreeAndNil(lForm);
  end;
end;

procedure TviewPrincipal.btnSairClick(Sender: TObject);
begin
  {Finalizando a aplicação}
  Application.Terminate;
end;

procedure TviewPrincipal.btnEditarClick(Sender: TObject);
var
  lForm: TviewAlterar;
begin
  {Verificando se o grid está preenchido}
  if mmtConsulta.IsEmpty then
  begin
    ShowMessage('Busque as tarefas antes!');
    Exit;
  end;

  lForm := TviewAlterar.Create(Self);
  try
    {Já atribuindo os valores no formulário em memória para facilitar}
    lForm.edtCodigo.Text := mmtConsulta.FieldByName('codigo').AsString;

    if mmtConsulta.FieldByName('status').AsString = 'A' then
      lForm.cbbStatus.ItemIndex := 0
    else lForm.cbbStatus.ItemIndex := 1;

    lForm.ShowModal;
    Buscar;
  finally
    FreeAndNil(lForm);
  end;
end;

procedure TviewPrincipal.btnExcluirClick(Sender: TObject);
begin
    if mmtConsulta.IsEmpty then
  begin
    ShowMessage('Busque as tarefas antes!');
    Exit;
  end;

  Excluir;
end;

procedure TviewPrincipal.btnBuscarClick(Sender: TObject);
begin
  Buscar;
end;

procedure TviewPrincipal.btnEstatisticasClick(Sender: TObject);
var
  lForm: TviewEstatisticas;
begin
  lForm := TviewEstatisticas.Create(Self);
  try
    lForm.ShowModal;
    Buscar;
  finally
    FreeAndNil(lForm);
  end;
end;

procedure TviewPrincipal.Excluir;
var
  lCodigo: String;
  LResponse: IResponse;
begin
  {Recebendo o código, caso queira alterar o da linha}
  lCodigo := InputBox('Tarefa','Confirmar o código da tarefa', mmtConsulta.FieldByName('codigo').AsString);

  {Validação do código}
  if StrToIntDef(lCodigo, 0) = 0 then
  begin
    ShowMessage('Código inválido!');
    Exit;
  end;

  try
    {Requisição de exclusão do registro}
    LResponse := TRequest.New.BaseURL('http://localhost:9000/task/' + lCodigo)
      .BasicAuthentication('bruno', 'montreal')
      .Accept('application/json')
      .Delete;

    {Validação para a mensagem}
    if LResponse.StatusCode = 200 then
    begin
      ShowMessage('Registro deletado!');
      Buscar;
    end
    else
      raise Exception.Create('Falha na exclusão da tarefa!');
  except
    on E: Exception do
      ShowMessage('Falha ao excluir a tarefa: ' + E.Message);
  end;
end;

procedure TviewPrincipal.FormCreate(Sender: TObject);
begin
  mmtConsulta.CreateDataSet;
end;

end.
